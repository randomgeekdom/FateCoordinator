@page "/character/{CharacterIdText}"
@using FateCoordinator.Contracts
@using FateCoordinator.Extensions
@using FateCoordinator.Repositories

@inject AuthenticationStateProvider authenticationStateProvider;
@inject ICharacterRepository characterRepository;
@inject IJSRuntime JS
@inject NavigationManager NavManager

<button class="btn btn-primary m-3 btn-sm" @onclick="(async)=>SaveAsync()">Save</button>
<button class="btn btn-danger m-3 btn-sm" @onclick="(async)=>DeleteAsync()">Delete</button>
<div class="card p-3">
<form>
    <div class="form-group">
        <label for="characterName">Name</label>
        <input id="characterName" class="form-control form-control-sm" type="text" placeholder="Character Name" @bind="CharacterDto.Name"/>
    </div>
</form>
</div>

@code {
    [Parameter]
    public string CharacterIdText { get; set; } = "";

    private Guid CharacterId => Guid.Parse(this.CharacterIdText);

    public CharacterDto CharacterDto { get; set; } = new CharacterDto();

    protected override async Task OnInitializedAsync()
    {
        this.CharacterDto = await this.characterRepository.GetCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
        await base.OnInitializedAsync();
    }

    private async Task<Guid> GetUserIdAsync()
    {
        return await authenticationStateProvider.GetUserIdAsync();
    }

    public async Task SaveAsync()
    {
        await this.characterRepository.SaveCharacterAsync(await this.GetUserIdAsync(), this.CharacterDto);
    }

    public async Task DeleteAsync()
    {
        if(await JS.Confirm("Are you sure you want to delete this character?"))
        {
            await this.characterRepository.DeleteCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
            this.NavManager.NavigateTo("/characters");
        }
    }
}
