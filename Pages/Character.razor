@page "/character/{CharacterIdText}"
@using FateCoordinator.Contracts
@using FateCoordinator.Extensions
@using FateCoordinator.Repositories
@using FateCoordinator.Services

@inject AuthenticationStateProvider authenticationStateProvider;
@inject ICharacterRepository characterRepository;
@inject IJSRuntime JS;
@inject NavigationManager NavManager;
@inject IDieRollerService dieRollerService;
@inject IValidator validator

<AuthorizeView>
    <Authorized>
        
<div class="row">
    <div class="col-md-8">
        
        <button class="btn btn-outline-light m-3 btn-sm" @onclick="()=>Roll(modifier)">Roll</button>
        @if(this.DiceRollResult != null)
        {
            <img class="rounded img-small" src="fate-die-@(this.DiceRollResult.FirstResult.ToString()).png" />
            <img class="rounded img-small" src="fate-die-@(this.DiceRollResult.SecondResult.ToString()).png" />
            <img class="rounded img-small" src="fate-die-@(this.DiceRollResult.ThirdResult.ToString()).png" />
            <img class="rounded img-small" src="fate-die-@(this.DiceRollResult.FourthResult.ToString()).png" />
            <inline>Result: @this.DiceRollResult.Result</inline>
        }
        <form class="m-3">
            <inline>Roll Modifier: <input id="modifier" type="number" @bind="modifier" class="form-control form-control-header form-control-sm text-white"/></inline>
        </form>
    </div>
    <div class="col-md-4">
        @if(this.IsEditing)
        {
            <button class="btn btn-primary m-3 btn-sm" @onclick="(async)=>SaveAsync()">Save</button>
        }
        else
        {
            <button class="btn btn-primary m-3 btn-sm" @onclick="ToggleEdit">Edit</button>
        }
        
        <button class="btn btn-danger m-3 btn-sm" @onclick="(async)=>DeleteAsync()">Delete</button>

        <button class="btn btn-light m-3 btn-sm" @onclick="()=>Validate()">Validate</button>
    </div>
</div>

        @foreach(var validation in this.Validations)
        {
            <p class="red-text">@validation</p>
        }

@if(this.IsEditing)
{
    <div class="row">
        <div class="col-md-5 my-3">
            <div class="card">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">ID</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <label for="characterName">Name</label>
                        <input id="characterName" class="form-control form-control-sm" type="text" @bind="CharacterDto.Name"/>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" class="form-control form-control-sm" @bind="CharacterDto.Description"/>
                    </div>
                    <div class="form-group">
                        <label for="fatePoints">Current Fate Points</label>
                        <input id="fatePoints" type="number" class="form-control form-control-sm" @bind="CharacterDto.FatePoints"/>
                    </div>
                    <div class="form-group">
                        <label for="refresh">Refresh</label>
                        <input id="refresh" type="number" class="form-control form-control-sm"  @bind="CharacterDto.Refresh"/>
                    </div>
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Extras</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <textarea id="extras" class="form-control form-control-sm" @bind="CharacterDto.Extras" placeholder="Enter any extra information here"/>
                    </div>
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Stress</h5>
                </div>
                <form class="m-2">
                    @foreach(var stressTrack in CharacterDto.StressTracks)
                    {
                        <div class="form-group">
                            <h6>@stressTrack.Name (@stressTrack.Skill): </h6>
                            @foreach(var (stress, index) in stressTrack.Stress.Select((key, value)=>(key, value)))
                            {
                                @stress.Level <input class="form-check-input form-check-inline" type="checkbox" value="@(stress.Value ? "True" : "False")" checked="@(stress.Value ? "checked" : null)" @onchange="@(e => UpdateStress(e.Value.ToString(), stressTrack.Name, stress.Level, index))" /> 
                            }
                        </div>
                    }
                </form>
            </div>
        </div>
        <div class="col-md-5 my-3">       
            <div class="card">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Character Type</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <select id="CharacterType" @bind="characterType" class="form-control">
                            @foreach(var characterType in @Enum.GetValues<CharacterType>().Cast<CharacterType>())
                            {
                                <option value="@characterType.ToString()">@characterType</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="card  my-3">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Aspects</h5>
                </div>
                <form class="m-2">
                    @foreach(var (aspect, index) in CharacterDto.Aspects.Select((item, index)=>(item, index)))
                    {
                        <div class="form-group">
                            <input class="form-control form-control-sm" type="text" value="@aspect" @onchange="@(e => UpdateAspect(e.Value.ToString(), index))" placeholder="@GetPlaceholder(index)"/>
                        </div>
                    }
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Stunts</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <textarea id="stunts" class="form-control expandable-textarea" @bind="CharacterDto.Stunts"/>
                    </div>
                </form>
            </div>

            
            
            <div class="card my-3">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Consequences</h5>
                </div>
                <form class="m-2 row">
                    @foreach(var (consequence, index) in CharacterDto.Consequences.Select((key, value)=>(key, value)))
                    {
                        <div class="card col-md-12 my-1">
                            <label for="@("Consequence"+consequence.Condition)">@consequence.Level</label>
                            <input id="@("Consequence"+consequence.Condition)" class="form-control form-control-sm" type="text" value="@consequence.Condition" @onchange="@(e => UpdateConsequence(e.Value.ToString(), consequence.Level, index))" placeholder="@GetConsequencePlaceholder(consequence.Level)"/> 
                    
                        </div>
                    }
                </form>
            </div>
        </div>
        <div class="col-md-2 my-3">
            <div class="card">
                <div class="card-header bg-@GetBootstrapColor()">
                    <h5 class="text-white">Skills</h5>
                </div>
                <form class="m-2">
                    @foreach(var skill in CharacterDto.Skills)
                    {
                        <div class="form-group">
                            <label for="@skill.Key">@skill.Key</label>
                            <input id="@skill.Key" class="form-control form-control-sm" type="number" value="@skill.Value" @onchange="@(e => UpdateSkill(skill.Key, int.Parse(e.Value.ToString())))"/>
                                @*<small class="text-end">@GetTextValue(@skill.Value)</small>*@
                        </div>
                    }
                </form>
            </div>
        </div>

        
    </div>
}
else
{
    <div class="card">
        <div class="card-header bg-@GetBootstrapColor()">
            <h5 class="text-white">@CharacterDto.Name</h5>
        </div>
        <div class="row">
            <div class="card-body col-md-4">
                <h6>Description</h6>
                <p>@CharacterDto.Description</p>
                <h6>Aspects</h6>
                @foreach(var aspect in CharacterDto.Aspects)
                {
                    <p>@aspect</p>
                }
                <h6>Stunts</h6>
                @foreach(var stunt in CharacterDto.Stunts.Split("\n\n", StringSplitOptions.RemoveEmptyEntries))
                {
                    <p>@stunt</p>
                }
                <h6>Extras</h6>
                <p>@CharacterDto.Extras</p>
            </div>
            <div class="card-body col-md-4">
                <h6>Fate Points</h6>
                <p>@CharacterDto.FatePoints / @CharacterDto.Refresh</p>
                @foreach(var stressTrack in CharacterDto.StressTracks)
                {
                    <h6>@stressTrack.Name (@stressTrack.Skill)</h6>
                    @foreach(var stress in stressTrack.Stress)
                    {
                        @stress.Level <input class="form-check-input form-check-inline" type="checkbox" value="@(stress.Value ? "True" : "False")" checked="@(stress.Value ? "checked" : null)" disabled /> 
                    }
                }
                <h6>Consequences</h6>
                @foreach(var consequence in CharacterDto.Consequences)
                {
                    <p>@consequence.Level : @consequence.Condition</p>
                }
            </div>
            <div class="card-body col-md-4">
                <h6>Skills</h6>
                @for(var i = 5; i >= 0; i--)
                {
                    @if(CharacterDto.Skills.Any(x=>x.Value == i))
                    {
                        <div><b>+@i</b>: 
                            @foreach(var skill in CharacterDto.Skills.Where(x => x.Value == i))
                            {
                                <a class="btn btn-sm btn-outline-primary m-1" @onclick="()=>Roll(skill.Value)"> @skill.Key</a>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public string CharacterIdText { get; set; } = "";

    public bool IsEditing{ get; set; }

    private Guid CharacterId => Guid.Parse(this.CharacterIdText);

    public CharacterDto CharacterDto { get; set; } = new CharacterDto();

    protected override async Task OnInitializedAsync()
    {
        this.CharacterDto = await this.characterRepository.GetCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
        await base.OnInitializedAsync();
    }

    private async Task<Guid> GetUserIdAsync()
    {
        return await authenticationStateProvider.GetUserIdAsync();
    }

    public async Task SaveAsync()
    {
        await this.characterRepository.SaveCharacterAsync(await this.GetUserIdAsync(), this.CharacterDto);
        this.IsEditing = false;
    }

    public async Task DeleteAsync()
    {
        if(await JS.Confirm("Are you sure you want to delete this character?"))
        {
            await this.characterRepository.DeleteCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
            this.NavManager.NavigateTo("/characters");
        }
    }

    public void ToggleEdit()
    {
        this.IsEditing = !this.IsEditing;
    }

    public void AddAspect()
    {
        this.CharacterDto.Aspects.Add(string.Empty);
    }

    public string GetPlaceholder(int index)
    {
        switch (index)
        {
            case 0:
                return "High Concept";
            case 1:
                return "Trouble";
            case 2:
                return "Relationship/Other";
            default:
                return "Other";
        }
    }

    public void UpdateAspect(string value, int index)
    {
        this.CharacterDto.Aspects.RemoveAt(index);
        this.CharacterDto.Aspects.Insert(index, value);
    }

    public void UpdateSkill(string key, int value)
    {
        this.CharacterDto.Skills[key] = value;
    }

    public string GetTextValue(int numericValue)
    {
        var dictionary = new Dictionary<int, string>
        {
            {5, "Superb"},
            {4, "Great"},
            {3, "Good"},
            {2, "Fair"},
            {1, "Average"},
            {0, "Mediocre"},
        };

        if(!dictionary.TryGetValue(numericValue, out var textValue))
        {
            textValue = "Invalid";
        }

        return textValue;
    }

    public string GetConsequencePlaceholder(int value)
    {
        if(value <= 2)
        {
            return "Mild";
        }

        if(value <= 4)
        {
            return "Moderate";
        }

        if(value <= 6)
        {
            return "Severe";
        }

        return string.Empty;
    }

    public void UpdateStress(string textValue, string trackName, int stress, int index)
    {
        var value = bool.Parse(textValue);
        var track = this.CharacterDto.StressTracks.Single(x=>x.Name==trackName);
        track.Stress.ElementAt(index).Value = value;
    }

    public void UpdateConsequence(string value, int level, int index)
    {
        var consequence = CharacterDto.Consequences.ElementAt(index);
        if (consequence != null)
        {
            consequence.Condition = value;
        }
    }

    private string characterType
    {
        get => this.CharacterDto.CharacterType.ToString();
        set => this.CharacterDto.CharacterType = Enum.Parse<CharacterType>(value);
    }

    private string GetBootstrapColor()
    {
        return this.CharacterDto.CharacterType.GetBoostrapColor();
    }

    public DiceRollResult? DiceRollResult = null;

    private void Roll(int addValue)
    {
        this.DiceRollResult = this.dieRollerService.RollDice(addValue);
    }

    private void Validate()
    {
        this.Validations = this.validator.ValidateCharacter(this.CharacterDto);
    }

    public IEnumerable<string> Validations { get; set; } = Enumerable.Empty<string>();

    public int modifier{ get; set; }
}
