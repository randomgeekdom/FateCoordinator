@page "/character/{CharacterIdText}"
@using FateCoordinator.Contracts
@using FateCoordinator.Extensions
@using FateCoordinator.Repositories

@inject AuthenticationStateProvider authenticationStateProvider;
@inject ICharacterRepository characterRepository;
@inject IJSRuntime JS
@inject NavigationManager NavManager

@if(this.IsEditing)
{
    <button class="btn btn-primary m-3 btn-sm" @onclick="(async)=>SaveAsync()">Save</button>
}
else
{
    <button class="btn btn-primary m-3 btn-sm" @onclick="ToggleEdit">Edit</button>
}

<button class="btn btn-danger m-3 btn-sm" @onclick="(async)=>DeleteAsync()">Delete</button>

@if(this.IsEditing)
{
    <div class="row">
        <div class="col-md-5 my-3">
            <div class="card">
                <div class="card-header bg-primary">
                    <h5 class="text-white">ID</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <label for="characterName">Name</label>
                        <input id="characterName" class="form-control form-control-sm" type="text" @bind="CharacterDto.Name"/>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" class="form-control form-control-sm" @bind="CharacterDto.Description"/>
                    </div>
                    <div class="form-group">
                        <label for="fatePoints">Current Fate Points</label>
                        <input id="fatePoints" type="number" class="form-control form-control-sm" @bind="CharacterDto.FatePoints"/>
                    </div>
                    <div class="form-group">
                        <label for="refresh">Refresh</label>
                        <input id="refresh" type="number" class="form-control form-control-sm"  @bind="CharacterDto.Refresh"/>
                    </div>
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-primary">
                    <h5 class="text-white">Extras</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <textarea id="extras" class="form-control form-control-sm" @bind="CharacterDto.Extras" placeholder="Enter any extra information here"/>
                    </div>
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-primary">
                    <h5 class="text-white">Stress</h5>
                </div>
                <form class="m-2">
                    @foreach(var stressTrack in CharacterDto.StressTracks)
                    {
                        <div class="form-group">
                            <h6>@stressTrack.Name (@stressTrack.Skill): </h6>
                            @foreach(var stress in stressTrack.Stress)
                            {
                                @stress.Key <input class="form-check-input form-check-inline" type="checkbox" value="@(stress.Value ? "True" : "False")" checked="@(stress.Value ? "checked" : null)" @onchange="@(e => UpdateStress(e.Value.ToString(), stressTrack.Name, stress.Key))" /> 
                            }
                        </div>
                    }
                </form>
            </div>
        </div>
        <div class="col-md-5 my-3">
            <div class="card">
                <div class="card-header bg-primary">
                    <h5 class="text-white">Aspects</h5>
                </div>
                <form class="m-2">
                    @foreach(var (aspect, index) in CharacterDto.Aspects.Select((item, index)=>(item, index)))
                    {
                        <div class="form-group">
                            <input class="form-control form-control-sm" type="text" value="@aspect" @onchange="@(e => UpdateAspect(e.Value.ToString(), index))" placeholder="@GetPlaceholder(index)"/>
                        </div>
                    }
                </form>
            </div>
            
            <div class="card my-3">
                <div class="card-header bg-primary">
                    <h5 class="text-white">Stunts</h5>
                </div>
                <form class="m-2">
                    <div class="form-group">
                        <textarea id="stunts" class="form-control form-control-sm" @bind="CharacterDto.Stunts"/>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-2 my-3">
            <div class="card">
                <div class="card-header bg-primary">
                    <h5 class="text-white">Skills</h5>
                </div>
                <form class="m-2">
                    @foreach(var skill in CharacterDto.Skills)
                    {
                        <div class="form-group">
                            <label for="@skill.Key">@skill.Key</label>
                            <input id="@skill.Key" class="form-control form-control-sm" type="number" value="@skill.Value" @onchange="@(e => UpdateSkill(skill.Key, int.Parse(e.Value.ToString())))"/>
                                @*<small class="text-end">@GetTextValue(@skill.Value)</small>*@
                        </div>
                    }
                </form>
            </div>
        </div>

        
    </div>
}
else
{
    <div class="card border-2 p-3">
        <p >Name: @CharacterDto.Name</p>
    </div>
}

@code {
    [Parameter]
    public string CharacterIdText { get; set; } = "";

    public bool IsEditing{ get; set; }

    private Guid CharacterId => Guid.Parse(this.CharacterIdText);

    public CharacterDto CharacterDto { get; set; } = new CharacterDto();

    protected override async Task OnInitializedAsync()
    {
        this.CharacterDto = await this.characterRepository.GetCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
        await base.OnInitializedAsync();
    }

    private async Task<Guid> GetUserIdAsync()
    {
        return await authenticationStateProvider.GetUserIdAsync();
    }

    public async Task SaveAsync()
    {
        await this.characterRepository.SaveCharacterAsync(await this.GetUserIdAsync(), this.CharacterDto);
        this.IsEditing = false;
    }

    public async Task DeleteAsync()
    {
        if(await JS.Confirm("Are you sure you want to delete this character?"))
        {
            await this.characterRepository.DeleteCharacterAsync(await this.GetUserIdAsync(), this.CharacterId);
            this.NavManager.NavigateTo("/characters");
        }
    }

    public void ToggleEdit()
    {
        this.IsEditing = !this.IsEditing;
    }

    public void AddAspect()
    {
        this.CharacterDto.Aspects.Add(string.Empty);
    }

    public string GetPlaceholder(int index)
    {
        switch (index)
        {
            case 0:
                return "High Concept";
            case 1:
                return "Trouble";
            case 2:
                return "Relationship/Other";
            default:
                return "Other";
        }
    }

    public void UpdateAspect(string value, int index)
    {
        this.CharacterDto.Aspects.RemoveAt(index);
        this.CharacterDto.Aspects.Insert(index, value);
    }

    public void UpdateSkill(string key, int value)
    {
        this.CharacterDto.Skills[key] = value;
    }

    public string GetTextValue(int numericValue)
    {
        var dictionary = new Dictionary<int, string>
        {
            {5, "Superb"},
            {4, "Great"},
            {3, "Good"},
            {2, "Fair"},
            {1, "Average"},
            {0, "Mediocre"},
        };

        if(!dictionary.TryGetValue(numericValue, out var textValue))
        {
            textValue = "Invalid";
        }

        return textValue;
    }

    public void UpdateStress(string textValue, string trackName, int stress)
    {
        var value = bool.Parse(textValue);
        var track = this.CharacterDto.StressTracks.Single(x => x.Name == trackName);
        track.Stress[stress] = value;
    }
}
