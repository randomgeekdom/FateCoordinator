@page "/characters"

@using FateCoordinator.Repositories
@using FateCoordinator.Extensions;
@using FateCoordinator.Contracts;

@inject ICharacterRepository characterRepository;
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime JS;

<PageTitle>Characters</PageTitle>

<AuthorizeView>
    <Authorized>
        <button class="btn btn-primary btn-sm" @onclick="(async)=>CreateAsync()">Create Character</button>

@if (characters.Any())
{
    <div class="row">
        @foreach(var character in characters)
        {
            <div class="col-md-4">
                <div class="card m-3">
                    <div class="card-header bg-primary bg-opacity-75">
                        <div class="card-title">
                            <a href="character/@character.Id"><h2>@character.Name</h2></a>
                        </div>
                        <div class="card-subtitle">
                            <sub class="text-positive">@GetCharacterAspect(character, 0)</sub>
                        </div>
                    </div>
                    <div class="card-body">
                        <ul>
                            @for(int i = 1; i < character.Aspects.Count; i++)
                            {
                                if (!string.IsNullOrWhiteSpace(character.Aspects.ElementAt(i)))
                                {
                                    <li>@character.Aspects.ElementAt(i)</li>   
                                }
                            }
                        </ul>
                    </div>
                    <div class="card-footer">
                        <sub>Footer: Should contain game that it's a part of</sub>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div>No characters have been created</div>
}
    </Authorized>
</AuthorizeView>



@code {
    private List<CharacterDto> characters = new List<CharacterDto>();

    protected override async Task OnInitializedAsync()
    {
        await this.GetAllAsync();
        await base.OnInitializedAsync();
    }

    public async Task GetAllAsync()
    {
        characters = (await this.characterRepository.GetAllAsync(await this.GetUserIdAsync())).ToList();
    }

    public async Task CreateAsync()
    {
        try
        {
            var character = await this.characterRepository.AddCharacterAsync(await this.GetUserIdAsync(), "New Character");
            this.NavManager.NavigateTo($"/character/{character.Id}");   
        }
        catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task<Guid> GetUserIdAsync()
    {
        return await authenticationStateProvider.GetUserIdAsync();
    }

    public string GetCharacterAspect(CharacterDto character, int index)
    {
        if(character.Aspects.Count > index)
        {
            return character.Aspects.ElementAt(index);
        }

        return "";
    }
}
